package edu.indiana.cs.c212;

/**
 * An instance of this class holds the data used by a Calculator. It has no
 * knowledge of either the View, which displays the controls and the data, nor
 * the Controller, which mediates user interaction with the View.
 * 
 * An instance of this class can be asked to return its memory, to set its
 * memory to a given number, to add a number to its memory, to subtract a number
 * from its memory, to multiply its memory by a number, or to divide its memory
 * by a number.
 * 
 * Since this class is holding the data for a simple 4-function calculator, it
 * only needs one piece of information: a memory of the computation done so far.
 * Thus, its 'memory' only needs to be one number large.
 * 
 * For such a simple calculator, it will be good enough to assume that the
 * numbers generated by the calculator will all fit into longs. From there you
 * need to figure out how to find the fractional part of the memory (which is a
 * double), then if that fraction is zero, convert the memory to a long (which
 * will chop off its fraction for you). Most users of a simple 4-function
 * calculator will be happy with numbers in the range that fit into longs
 * (-9,223,372,036,854,775,808 to +9,223,372,036,854,775,807).
 */

public class CalculatorModel {
	private double memory;

	public CalculatorModel() {
		memory = 0;
	}

	/*
	 * You have two special tasks to complete in your getMemory method. 
	 * 1. You need to handle division by zero so that your calculator returns
	 * "Infinity" when you divide by zero. 
	 * 2. You need to return integer values	as integers in your String (no decimals).
	 * For example: 6.0/3.0 should return 2 and not 2.0
	 * 
	 * You will need to know Double.toString() or Long.toString() which takes a
	 * double or a long, converts it to a String, and gives you back that String.
	 * 
	 * You may also want to make use of %. a % b gives you the
	 * remainder of a divided by b. For example 11 % 4 = 3
	 */
	public String getMemory() {

		//FIXME
		return "I'm broken, please fix me";

	}

	public void setMemory(String string) {
		memory = convertStringToDouble(string);
	}

	public void addToMemory(String string) {
		memory += convertStringToDouble(string);
	}

	public void subtractFromMemory(String string) {
		memory -= convertStringToDouble(string);
	}

	public void multiplyMemoryBy(String string) {
		memory *= convertStringToDouble(string);
	}

	public void divideMemoryBy(String string) {
		memory /= convertStringToDouble(string);
	}

	private double convertStringToDouble(String string) {
		// all inputs are guaranteed to be whole number strings
		// so there's no need to worry about NumberFormatException

		return Double.parseDouble(string);
	}

	protected void setMemory(double memory) {
		this.memory = memory;
	}

	protected double internalGetMemory() {
		return memory;
	}
}